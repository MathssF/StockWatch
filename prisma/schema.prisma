generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  sku         String   @unique // Identificador único do produto
  description String?
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  stock       Stock[]
}

model DetailType {
  id          Int           @id @default(autoincrement())
  name        String        @unique // Nome do tipo de detalhe (ex.: cor, tamanho)
  details     Detail[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Detail {
  id          Int           @id @default(autoincrement())
  typeId      Int
  type        DetailType    @relation(fields: [typeId], references: [id], onDelete: Cascade)
  value       String        // Valor do detalhe (ex.: "Azul", "P")
  stockDetails StockDetail[]
  // Futuro relacionamento com CustomerPreferences
  // customerPreferences CustomerPreferences[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Stock {
  id          Int      @id @default(autoincrement())
  productId   Int
  quantity    Int      // Quantidade disponível para essa variação específica
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  StockDetail StockDetail[]
  orderItems  OrderItem[] // Relação oposta com OrderItem

  // Futuro relacionamento com CustomerPromotions
  // customerPromotions CustomerPromotions[]
}

model StockDetail {
  id          Int      @id @default(autoincrement())
  stockId     Int
  detailId    Int
  stock       Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  detail      Detail   @relation(fields: [detailId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model RabbitMQMessage {
  id          Int      @id @default(autoincrement())
  messageId   String   @unique // ID da mensagem no RabbitMQ
  produceId   String
  consumerId  String
  queue       String   // Nome da fila onde a mensagem foi processada
  status      String   // 'PENDING', 'PROCESSED', 'FAILED'
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Customer {
  id        Int        @id @default(autoincrement())
  name      String
  lastname  String
  email     String?    @unique
  phone     String?    @unique
  insta     String?    @unique
  orders    Order[]    @relation("CustomerOrders")
  birthdate DateTime
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Futuro relacionamento com CustomerPreferences
  // preferences CustomerPreferences[]

  // Futuro relacionamento com CustomerPromotions
  // promotions CustomerPromotions[]
}

model Order {
  id          Int             @id @default(autoincrement())
  orderNumber String          @unique
  customerId  Int
  customer    Customer        @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade)
  items       OrderItem[]
  status      String          // 'PENDING', 'SHIPPED', 'DELIVERED', 'CANCELLED'
  createdAt   DateTime        @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  stockId   Int      // Relacionamento com a variação específica do produto
  stock     Stock    @relation(fields: [stockId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
}

// Future:

/*
model CustomerPreferences {
  id          Int      @id @default(autoincrement())
  customerId  Int
  detailId    Int
  customer    Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  detail      Detail   @relation(fields: [detailId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
*/

/*
model CustomerPromotions {
  id            Int          @id @default(autoincrement())
  customerId    Int
  stockId       Int
  stockDetailId Int
  customer      Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  stock         Stock        @relation(fields: [stockId], references: [id], onDelete: Cascade)
  stockDetail   StockDetail  @relation(fields: [stockDetailId], references: [id], onDelete: Cascade)
  promoValue    Int
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
*/